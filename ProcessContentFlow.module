<?php
/**
 * Content Flow
 * ================
 * @website https://github.com/ryannmicua/ProcessContentFlow
 * @author Ryann Micua <http://pogidude.com/>
 * @license GPL 3 <http://www.gnu.org/licenses/gpl-3.0.txt>
 * 
 * An attempt to creating an editorial workflow in ProcessWire
 */

class ProcessContentFlow extends Process implements Module, ConfigurableModule {

   protected $form;
   protected $isPost;

   protected static $_module_dir;
   protected static $_module_url; 
   protected static $defaults = array(
      );

   const PAGE_BASE_NAME = 'contentflow';
   const PERMISSION_NAME = 'contentflow-access';
   const STATUS_TEMPLATE_NAME = 'contentflow-status';
   const HOLDER_TEMPLATE_NAME = 'contentflow-holder';

   public function __construct(){
      //set paths and urls
      self::$_module_dir = $this->config->paths->siteModules . __CLASS__;
      self::$_module_url = $this->config->urls->siteModules . __CLASS__;
   }

   public static function getModuleInfo(){
      return array(
         'title' => 'Content Flow',
         'version' => 1,
         'summary' => 'Adds an editorial workflow inside ProcessWire.',
         'author' => 'Pogidude',
         //'singular' => true,
         //'autoload' => true,
         'href' => 'https://github.com/ryannmicua/ProcessContentFlow',
         'permission' => self::PERMISSION_NAME,
         'installs' => array('PageContentFlow')
      );
   }

   /**
    * Attach our hooks here
    */
   public function init(){
      //determine if we're going to be dealing with a save/post request
      $this->isPost = ($this->input->post->isPost == 'true' && true);

      parent::init();
      
      if(!$this->isPost) $this->modules->get('JqueryWireTabs');
   }

   /**
    * Execute and call render functions
    * 
    * @return html
    */
   public function ___execute(){

      if($this->isPost){
         $this->processSave();
      }

      return $this->renderUI();
   }

   /**
    * Render our pages
    */
   protected function renderUI(){
      $modules = $this->modules;

      //$this->setFuel('processHeadline', 'Content Flow Here');
      $this->form = $modules->get('InputfieldForm');
      $this->form->attr('id', __CLASS__);
      $this->form->setTrackChanges();

      //build our tabs
      $this->form->append($this->buildFormDashboard());
      $this->form->append($this->buildFormNotificationSettings());
      $this->form->append($this->buildFormStatusSettings());

      $saveField = $modules->get('InputfieldSubmit');
      $saveField->attr('name', 'submit_save');
      $saveField->attr('id', 'submitSave');
      $saveField->class .= ' head_button_clone';
      $saveField->attr('value', $this->_('Save Settings'));
      $this->form->append($saveField);

      $hidden = $modules->get('InputfieldHidden');
      $hidden->attr('name', 'isPost');
      $hidden->attr('value', 'true');
      $this->form->append($hidden);

      return $this->form->render();
   }

   /**
    * Process submission
    */
   protected function processSave(){
      $message = 'Saved Settings';
      $this->message($message);

      $this->processSaveRedirect($this->redirectUrl);
   }

   /**
    * Perform an after save redirect
    */
   protected function ___processSaveRedirect($redirectUrl){
      if(!$redirectUrl) $redirectUrl = './?s=1';
      $this->redirectUrl = $redirectUrl;
      $this->session->redirect($redirectUrl);
   }

   /**
    * Build the 'Dashboard' tab on the Content Flow form
    */
   protected function ___buildFormDashboard(){
      $modules = $this->modules;

      $wrapper = new InputfieldWrapper();
      $wrapper->attr('id', __CLASS__ . 'Dashboard');
      $wrapper->attr('title', $this->_('Dashboard'));

      $field = $modules->get('InputfieldMarkup');
      $field->label = $this->_('My Markup');
      $field->attr('value', '<h4>Not my markup content</h4>');

      $wrapper->append($field);
      return $wrapper;
   }

   /**
    * Build the 'Notification Settings' tab
    */
   protected function ___buildFormNotificationSettings(){
      $modules = $this->modules;

      $wrapper = new InputfieldWrapper();
      $wrapper->attr('id', __CLASS__ . 'NotificationSettings');
      $wrapper->attr('title', $this->_('Notification Settings'));

      $field = $modules->get('InputfieldMarkup');
      $field->label = $this->_('My Markup');
      $field->attr('value', '<h4>Notification Saettings</h4>');

      $wrapper->append($field);
      return $wrapper;
   }

   /**
    * Build 'Status Settings' tab
    */
   protected function ___buildFormStatusSettings(){
      $languages = $this->languages;
      $language = $this->user->language; 
      $modules = $this->modules;

      $wrapper = new InputfieldWrapper();
      $wrapper->attr('id', __CLASS__ . 'StatusSettings');
      $wrapper->attr('title', $this->_('Status &amp; Workflow Settings'));

      $field = $modules->get('InputfieldMarkup');
      $field->label = $this->_('Status Settings');
      $field->attr('value', '<h4>Status Settings</h4>');

      $fieldTemplates = $modules->get('InputfieldSelect');
      $fieldTemplates->label = $this->_('Specify which templates should have publishing workflow');
      $fieldTemplates->attr('id', 'templatesWithWorkflow');
      $fieldTemplates->attr('name', 'templates_with_workflow');
      $fieldTemplates->attr('value', $this->templates_with_workflow);

      foreach($this->templates as $template){
         $label = '';
         if($languages && $language) $label = $template->get('label' . $language->id); 
         if(!$label) $label = $template->label ? $template->label : $template->name;
         $fieldTemplates->addOption($template->id, $label);
      }

      $wrapper->append($fieldTemplates);
      return $wrapper;
   }

   /**
    * Build 'Workflow Settings' tab
    */
   protected function ___buildWorkflowSettings(){
      $modules = $this->modules;
      $wrapper = new InputfieldWrapper();
      $wrapper->attr('id', __CLASS__ . 'WorkflowSettings');
      $wrapper->attr('title', $this->_('Workflow Settings'));

      $field = $modules->get('InputfieldSelect');
      $field->label = $this->_('Use workflow stages');
      $field->attr('value', '<h4>Status Settings</h4>');

      $wrapper->append($field);
      return $wrapper;
   }

   /**
    * ======================================
    * HOOKS GO BELOW
    * ======================================
    */



   /**
    * ======================================
    * INSTALL, UNINSTALL, INPUTCONFIG
    * ======================================
    */
   private function _getDefaults($type=''){
      $statuses = array(
         'pitch' => 'Pitch',
         'assigned' => 'Assigned',
         'draft' => 'Draft',
         'pending-review' => 'Pending Review'
         );

      switch($type){
         case 'status':
         case 'statuses':
            return $statuses;

         default:
      }
   }

   public function ___install(){

      //create our custom templates
      $this->_createCustomTemplates();

      //create our custom admin pages
      $this->_createCustomPages();

   }

   public function ___uninstall(){
      $permission = $this->permissions->get(self::PERMISSION_NAME);
      if($permission->id){
         $permission->delete();
      }

      //delete our cf tree
      $adminRootId = $this->config->adminRootPageID;
      $cfPage = $checkPage = $this->pages->get("template=admin,parent=$adminRootId,name=" . self::PAGE_BASE_NAME);
      if($cfPage->id){
         //delete cf page and all children permanently
         $this->pages->delete($cfPage, true);
      }

      $checkHolderTemplate = $this->templates->get(self::HOLDER_TEMPLATE_NAME);
      if($checkHolderTemplate->id){
         //try to delete our custom template
         try{
            
            $holderfg = $checkHolderTemplate->fieldgroup;

            $checkHolderTemplate->flags = Field::flagSystemOverride;
            $checkHolderTemplate->flags = 0;
            //$checkHolderTemplate->save();
            $this->templates->delete($checkHolderTemplate);

            //TODO: check if other templates are using fieldgroup??
            $this->fieldgroups->delete($holderfg);
            
         } catch(Exception $e){
            //this can happen if *someone* uses our holder templates
         }
      }

   }

   public static function getModuleConfigInputFields( array $data ){
      $data = array_merge(self::$defaults, $data);

      $fields = new InputfieldWrapper();
      $modules = wire('modules');

      return $fields;
   }

   /**
    * HELPER FUNCTIONS
    */
   
   private function _createCustomTemplates(){
      //create cf holder template and fieldgroup
      $checkHolderTemplate = $this->templates->get(self::HOLDER_TEMPLATE_NAME);
      if(is_null($checkHolderTemplate)){

         $holderfg = $this->fieldgroups->get(self::HOLDER_TEMPLATE_NAME);
         if(!$holderfg){
            $holderfg = new Fieldgroup();
            $holderfg->name = self::HOLDER_TEMPLATE_NAME; //fieldgroup and template have the same name
            $holderfg->add($this->fields->get('title')); //required field
            $holderfg->save();
         } else {
            //fieldgroup already exists
            foreach($this->fieldgroups->getAll() as $fieldgroup){
               $fgname = $fieldgroup->name;
               if($fgname == self::HOLDER_TEMPLATE_NAME){
                  $holderfg = $fieldgroup;
                  break;
               }
            }
         }

         $holderTemplate = new Template();
         $holderTemplate->name = self::HOLDER_TEMPLATE_NAME;
         $holderTemplate->fieldgroup = $holderfg;
         $holderTemplate->flags = 1;
         $holderTemplate->noGlobal = 1;
         $holderTemplate->nameContentTab = 1;
         $holderTemplate->flags = $this->template->flags | Template::flagSystem;
         $holderTemplate->save();
      }
   }

   private function _addTemplateFields(){

   }

   private function _createCustomPages(){
      
      $templates = $this->templates;
      $pages = $this->pages;

      $holderTemplate = $templates->get(self::HOLDER_TEMPLATE_NAME);

      //see if we still need to create our page
      $checkPage = $this->pages->get('template=admin,name=' . self::PAGE_BASE_NAME);
      if(!$checkPage->id){
         //create our base settings page under "admin"
         $cfPage = new Page();
         $cfPage->template = $templates->get('admin');
         $cfPage->parent = $pages->get($this->config->adminRootPageID);
         $cfPage->title = 'Content Flow';
         $cfPage->name = self::PAGE_BASE_NAME;
         $cfPage->process = $this;
         $cfPage->save();

         $cfRootPage = $cfPage;
      } else {
         $cfRootPage = $checkPage;
      }

      //see if we still need to create our permissions
      $checkPermission = $this->permissions->get(self::PERMISSION_NAME);
      if(!$checkPermission->id){
         $perm = new Permission();
         $perm->name = self::PERMISSION_NAME;
         $perm->title = $this->_('Access Content Flow pages');
         $perm->save();
      }

      //create our custom templates and fieldgroups
      $checkStatuses = $pages->get("parent=$cfRootPage,name=contentflow-statuses");
      if(!$checkStatuses->id){
         $pStatuses = new Page();
         $pStatuses->template = $holderTemplate;
         $pStatuses->parent = $cfRootPage;
         $pStatuses->name = 'status';
         $pStatuses->title = $this->_('Status');
         $pStatuses->save();

         $statusRoot = $pStatuses;
      } else {
         $statusRoot = $checkStatuses;
      }

      //create our default statuses
      if(!$statusRoot->numChildren){
         $defaultStatuses = $this->_getDefaults('status');
         foreach($defaultStatuses as $name => $title){
            $p = new Page();
            $p->parent = $statusRoot;
            $p->template = $holderTemplate;
         }
      }
   }
}