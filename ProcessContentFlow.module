<?php
/**
 * Content Flow
 * ================
 * @website https://github.com/ryannmicua/ProcessContentFlow
 * @author Ryann Micua <http://pogidude.com/>
 * @license GPL 3 <http://www.gnu.org/licenses/gpl-3.0.txt>
 * 
 * An attempt to creating an editorial workflow in ProcessWire
 */

class ProcessContentFlow extends Process implements Module, ConfigurableModule {

   protected $form;
   protected $isPost;
   protected $data = array();

   protected static $module_dir;
   protected static $module_url; 
   protected static $defaults = array(
      );

   const PERMISSION_NAME = 'contentflow-access';
   const ROOT_PAGE_NAME = 'contentflow';
   const ROOT_TEMPLATE_NAME = 'contentflow';
   const HOLDER_TEMPLATE_NAME = 'contentflow-holder';

   public function __construct(){
      //set paths and urls
      self::$module_dir = $this->config->paths->siteModules . __CLASS__;
      self::$module_url = $this->config->urls->siteModules . __CLASS__;
   }

   public static function getModuleInfo(){
      return array(
         'title' => 'Content Flow',
         'version' => 1,
         'summary' => 'Adds an editorial workflow inside ProcessWire.',
         'author' => 'Pogidude',
         //'singular' => true,
         //'autoload' => true,
         'href' => 'https://github.com/ryannmicua/ProcessContentFlow',
         'permission' => self::PERMISSION_NAME,
         'installs' => array('PageContentFlow')
      );
   }

   /**
    * Attach our hooks here
    */
   public function init(){

      if($this->page->id != $this->root_page_id) return;

      $this->page->setOutputFormatting(false); 

      //determine if we're going to be dealing with a save/post request
      $this->isPost = ($this->input->post->isPost == 'true' && true);

      parent::init();
      
      if(!$this->isPost) $this->modules->get('JqueryWireTabs');

      $this->data = $this->modules->getModuleConfigData($this);

   }

   /**
    * Execute and call render functions
    * 
    * @return html
    */
   public function ___execute(){

      //$this->setFuel('processHeadline', 'Content Flow Here');
      $this->form = $this->modules->get('InputfieldForm');

      $this->form = $this->buildForm($this->form);
      $this->form->setTrackChanges();

      if($this->isPost && count($_POST)) $this->processSave();

      return $this->renderUI();
   }

   public function ___executeTry(){
      $form = $this->modules->get('InputfieldForm');
      $field = $this->modules->get('InputfieldMarkup');
      $field->label = $this->_('My Markup');
      $field->attr('value', '<pre><code>'.print_r($this->data,true).print_r($this->page->templates_with_workflow,true).'</code></pre>');
      $form->append($field);
      return $form->render(); 
   }

   public function ___executeWorkflowTemplates(){
      
      //TODO: make sure user has permission to update templates
      
      if(!isset($_GET['templates'])) throw new WireException("This method requires a 'templates' GET var");

      $templatesGet = explode(',', $_GET['templates']);

      $templates = array();
      //build array of templates
      foreach($templatesGet as $templateId){
         $template = $this->templates->get((int) $templateId);
         if(!$template) throw new WireException("Unknown template ID: $templateId");
         $templates[] = $template;
      }

      $form = $this->modules->get('InputfieldForm');
      $form->attr('action', 'saveWorkflowTemplates');
      $form->attr('method', 'post');
      $form->description = $this->_('Update templates that will have workflow');

      $field = $this->modules->get('InputfieldMarkup');
      $field->label = $this->_('Confirm adding of workflow to the following templates');
      $list = '';
      foreach($templates as $t){
         $list .= '<li class="ui-state-highlight"><span class="ui-icon ui-icon-alert"></span> ' . $t->
      }

      $field->attr('value', '<pre><code>'.print_r($this->data,true).print_r($this->page->templates_with_workflow,true).'</code></pre>');
      $form->append($field);
      return $form->render(); 
   }

   public function ___executeSaveTemplate($templates = null){
      //TODO: make sure user has permission
   }

   /**
    * Render our pages
    */
   protected function renderUI(){

      //$this->setFuel('processHeadline', 'Content Flow Here');
      

      return $this->form->render();
   }

   /**
    * Process submission
    */
   protected function processSave(){
      $message = 'Saved Settings';
      $post = $this->input->post;
      $page = $this->page;
      
      $this->processInput($this->form);

      foreach(array_unique($this->page->getChanges()) as $change) {
         $this->message(sprintf($this->_('Change: %s'), $change)); // Message shown for each changed field
      }

      if($page->save()){
         $this->message($message);
      } else {
         $this->error('Problem saving settings');
      }

      $this->processSaveRedirect($this->redirectUrl);
   }

   /**
    * Process Input from submitted form
    */
   protected function ___processInput(Inputfield $form, $level = 0){
      static $skipFields = array(
         'submit_save',
         'isPost'
         );

      if(!$level){
         $form->processInput($this->input->post);
      }

      $languages = $this->languages;

      foreach($form as $inputfield){
         $name = $inputfield->attr('name');

         if(in_array($name, $skipFields)) continue;

         if($name == 'templates_with_workflow'){
            $this->processInputTemplatesWithWorkflow($inputfield);
            continue;
         }

         if($name && $inputfield->isChanged()){
            if($languages && $inputfield->useLanguages){
               $v = $this->page->get($name);
               if(is_object($v)){
                  $v->setFromInputfield($inputfield);
                  $this->page->set($name, $v);
                  $this->page->trackChange($name);
               }
            } else {
               $this->page->set($name, $inputfield->value);
            }
         }

         if($inputfield instanceof InputfieldWrapper && count($inputfield->getChildren())){
            $this->processInput($inputfield, $level + 1); 
         }
      }
   }

   protected function processInputTemplatesWithWorkflow(Inputfield $inputfield){

      if(!$inputfield->value || !is_array($inputfield->value)){
         return true;
      }

      if($inputfield->isChanged()){
         $this->redirectUrl = 'workflowtemplates?templates=' . implode(',', $inputfield->value); 
      }
      
   }

   /**
    * Perform an after save redirect
    */
   protected function ___processSaveRedirect($redirectUrl){
      if(!$redirectUrl) $redirectUrl = './?s=1';
      $this->redirectUrl = $redirectUrl;
      $this->session->redirect($redirectUrl);
   }

   /**
    * Build form
    */
   protected function ___buildForm(InputfieldForm $form){
      $modules = $this->modules;
      
      $form->attr('id', __CLASS__);

      //build our tabs
      $form->append($this->buildFormDashboard());
      $form->append($this->buildFormNotificationSettings());
      $form->append($this->buildFormStatusSettings());

      $saveField = $modules->get('InputfieldSubmit');
      $saveField->attr('name', 'submit_save');
      $saveField->attr('id', 'submitSave');
      $saveField->class .= ' head_button_clone';
      $saveField->attr('value', $this->_('Save Settings'));
      $form->append($saveField);

      $hidden = $modules->get('InputfieldHidden');
      $hidden->attr('name', 'isPost');
      $hidden->attr('value', 'true');
      $form->append($hidden);

      return $form;
   }

   /**
    * Build the 'Dashboard' tab on the Content Flow form
    */
   protected function ___buildFormDashboard(){
      $modules = $this->modules;

      $wrapper = new InputfieldWrapper();
      $wrapper->attr('id', __CLASS__ . 'Dashboard');
      $wrapper->attr('title', $this->_('Dashboard'));

      $field = $modules->get('InputfieldMarkup');
      $field->label = $this->_('My Markup');
      $field->attr('value', '<pre><code>'.print_r($this->data,true).print_r($this->page->templates_with_workflow,true).'</code></pre>');

      $wrapper->append($field);
      return $wrapper;
   }

   /**
    * Build the 'Notification Settings' tab
    */
   protected function ___buildFormNotificationSettings(){
      $modules = $this->modules;

      $wrapper = new InputfieldWrapper();
      $wrapper->attr('id', __CLASS__ . 'NotificationSettings');
      $wrapper->attr('title', $this->_('Notification Settings'));

      $field = $modules->get('InputfieldMarkup');
      $field->label = $this->_('My Markup');
      $field->attr('value', '<h4>Notification Saettings</h4>');

      $wrapper->append($field);
      return $wrapper;
   }

   /**
    * Build 'Status Settings' tab
    */
   protected function ___buildFormStatusSettings(){
      $languages = $this->languages;
      $language = $this->user->language; 
      $page = $this->page;
      $modules = $this->modules;

      $wrapper = new InputfieldWrapper();
      $wrapper->attr('id', __CLASS__ . 'StatusSettings');
      $wrapper->attr('title', $this->_('Status &amp; Workflow Settings'));

      $field = $modules->get('InputfieldMarkup');
      $field->label = $this->_('Status Settings');
      $field->attr('value', '<h4>Status Settings</h4>');
      $wrapper->append($field);

/*
      $fieldTemplates = $modules->get('InputfieldAsmSelect');
      $fieldTemplates->label = $this->_('Specify which templates should have publishing workflow');
      $fieldTemplates->attr('id', 'templatesWithWorkflow');
      $fieldTemplates->attr('name', 'templates_with_workflow');
      $fieldTemplates->attr('value', $this->templates_with_workflow);

      foreach($this->templates as $template){
         $label = '';
         if($languages && $language) $label = $template->get('label' . $language->id); 
         if(!$label) $label = $template->label ? $template->label : $template->name;
         $fieldTemplates->addOption($template->id, $label);
      }
*/
      $fields = $page->getInputfields();

      //$field = $page->template->fieldgroup->getField('templates_with_workflow');
      $field = $page->fields->get('templates_with_workflow');
      $fieldTemplates = $field->getInputfield($page);
      if(!$fieldTemplates){
         $this->error('Could not display Templates field');
      } else {
         
         $fieldTemplates->value = $page->get($field->name);

         $wrapper->append($fieldTemplates);
      }

      return $wrapper;
   }

   /**
    * Build 'Workflow Settings' tab
    */
   protected function ___buildWorkflowSettings(){
      $modules = $this->modules;
      $wrapper = new InputfieldWrapper();
      $wrapper->attr('id', __CLASS__ . 'WorkflowSettings');
      $wrapper->attr('title', $this->_('Workflow Settings'));

      $field = $modules->get('InputfieldSelect');
      $field->label = $this->_('Use workflow stages');
      $field->attr('value', '<h4>Status Settings</h4>');

      $wrapper->append($field);
      return $wrapper;
   }

   /**
    * ======================================
    * HOOKS GO BELOW
    * ======================================
    */



   /**
    * ======================================
    * INSTALL, UNINSTALL, INPUTCONFIG, SETTINGS
    * ======================================
    */


   public function ___install(){

      //create our custom templates
      $this->createCustomTemplates();

      //create our custom admin pages
      $this->createCustomPages();

      //create fields
      $this->createFields();

      //set up root template
      $this->setupRootPageAndTemplate();
      
   }

   public function ___uninstall(){
      $permission = $this->permissions->get(self::PERMISSION_NAME);
      if($permission->id){
         $permission->delete();
      }

      //delete our cf tree
      $adminRootId = $this->config->adminRootPageID;
      $cfPage = $checkPage = $this->pages->get("parent=$adminRootId,name=" . self::ROOT_PAGE_NAME);
      if($cfPage->id){
         //delete cf page and all children permanently
         $cfPath = $cfPage->url;
         if($this->pages->delete($cfPage, true)){
            $this->message('Deleted Content Flow page and all children at: ' . $cfPath);
         } else {
            $this->error('Problem deleting Content Flow page and all children at: ' . $cfPath);
         }
      }

      //remove our custom templates
      $this->deleteCustomTemplates();

      //delete our fields
      $this->deleteFields();

   }

   public static function getModuleConfigInputFields( array $data ){
      $data = array_merge(self::$defaults, $data);

      $fields = new InputfieldWrapper();
      $modules = wire('modules');

      return $fields;
   }

   protected function getStuff($type=''){
      $templates = array( self::ROOT_TEMPLATE_NAME, self::HOLDER_TEMPLATE_NAME);
      $statuses = array(
         'pitch' => 'Pitch',
         'assigned' => 'Assigned',
         'draft' => 'Draft',
         'pending-review' => 'Pending Review'
         );

      switch($type){
         case 'templates':
            return $templates;

         case 'status':
         case 'statuses':
            return $statuses;

         default:
            return array();
      }
   }

   /**
    * HELPER FUNCTIONS
    */
   

   /**
    * Set module data on $this->data but won't actually save module data. To save,
    * call $this->saveModuleData()
    * 
    * @param string $key
    * @param mixed $value
    */
   protected function setModuleData($key, $value){
      $this->data[$key] = $value;
   }

   /**
    * Saves the data array stored on $this->data
    *
    * return bool true on success otherwise false
    */
   protected function saveModuleData(){
      return $this->modules->saveModuleConfigData($this, $this->data);
   }

   /**
    * Return a label for a given template
    * @param  Template $template template object
    * @return String             nice label of the template
    */
   protected function getTemplateLabel(Template $template) {
      $label = '';
      $user = wire('user'); 
      $language = wire('languages') && $user->language->id && !$user->language->isDefault ? wire('user')->language : null;
      if($language) $label = $template->get('label' . $language->id);
      if(!$label) $label = $template->label ? $template->label : $template->name; 
      return $label;
   }


   /**
    * Add specified fields to specified templates
    * @param array $templates    array of templates names i.e. array('admin', 'basic-page');
    * @param array $fieldnames   array of field names i.e. array('title', 'body');
    */
   protected function addTemplateFields($templates = null, $fieldnames = null){
      
      if(empty($templates) || empty($fieldnames)){
         $this->error('Error while calling ' . __CLASS__ . '::addTemplateFields(). Parameters must not be empty.');
      }

      foreach($templates as $tname){
         $template = $this->templates->get($tname);
         if(is_null($template)){
            $this->error('Error adding fields to template (' . $tname . ') because it does not exist.');
         } else {
            foreach($fieldnames as $fieldName){
               $template->fields->add($fieldName);
               if($template->fields->save()){
                  $this->message('Added field ' . $fieldName . ' to template ' . $baseTemplate->name);
               } 
            }
         }
      }

   }


   /**
    * INSTALL/UNINSTALL HELPER FUNCTIONS
    */
   
   protected function createCustomTemplates(){
      $templatesToCreate = array( 
         self::HOLDER_TEMPLATE_NAME,
         self::ROOT_TEMPLATE_NAME
      );

      foreach( $this->getStuff('templates') as $tname ){

         $temp = $this->templates->get($tname);
         if(is_null($temp)){

            $fg = $this->fieldgroups->get($tname);
            if(!$fg){
               $fg = new Fieldgroup();
               $fg->name = $tname; //fieldgroup and template have the same name
               $fg->add($this->fields->get('title')); //required field
               $fg->save();
            }

            $temp = new Template();
            $temp->name = $tname;
            $temp->fieldgroup = $fg;
            $temp->noGlobal = 1;
            $temp->nameContentTab = 1;
            $temp->flags = $this->template->flags | Template::flagSystem;
            if($temp->save()){
               $this->message('Created template: ' . $tname);
            } else {
               $this->error('Problem creating template: ' . $tname);
            }
         }
      }
   }

   protected function deleteCustomTemplates(){
      foreach($this->getStuff('templates') as $tname){
         $temp = $this->templates->get($tname);
         if(!is_null($temp)){
            //try to delete our custom template
            try{
               $fg = $temp->fieldgroup;

               $temp->flags = Template::flagSystemOverride;
               $temp->flags = 0;
               $temp->save();
               if($this->templates->delete($temp)){
                  $this->message('Removed template: ' . $tname);
               } else {
                  $this->message('Could not remove template: ' . $tname);
               }

               //TODO: check if other templates are using fieldgroup??
               $this->fieldgroups->delete($fg);
               
            } catch(Exception $e){
               //this can happen if *someone* uses our holder templates
               $this->error('Fatal error while deleting template: ' . $tname);
            }
         }
      }
   }

   protected function ___setupRootPageAndTemplate(){

      $basePage = $this->pages->get($this->root_page_id);

      //set 'process' field
      $basePage->process = $this;

      //set 'templates_with_workflow' field to empty array to avoid error
      $basePage->templates_with_workflow = array();

      //add template fields and stuff here.
      $baseTemplate = $this->templates->get(self::ROOT_TEMPLATE_NAME);
      $baseTemplateFields = array('templates_with_workflow', 'process');
      if(is_null($baseTemplate)){
         $this->error('Error adding fields to base template (' . self::ROOT_TEMPLATE_NAME . ') because it does not exist.');
      } else {
         foreach($baseTemplateFields as $fieldName){
            $baseTemplate->fields->add($fieldName);
            if($baseTemplate->fields->save()){
               $this->message('Added field ' . $fieldName . ' to template ' . $baseTemplate->name);
            }  
         }
      }

      //specify alternate template filename
      $baseTemplate->altFilename = 'admin';

      //allow url segments
      $baseTemplate->urlSegments = 1;

      //save
      $basePage->save();
      $baseTemplate->save();

   }

   protected function createFields(){
      //create 'templates with workflow' field
      if(!$this->fields->get('templates_with_workflow')){
         $field = new Field();
         $field->name = 'templates_with_workflow';
         $field->label = 'Templates with workflow';
         $field->description = 'Specify which templates should have publishing workflow';
         $field->labelFieldName = 'label';
         $field->type = wire('modules')->get('FieldtypeTemplates');
         $field->flags = $this->field->flags | Field::flagSystem;

         //set initial template types available
         $templateTypes = array();
         foreach($this->templates as $template){
            if($template->flags & Template::flagSystem) continue;
            $templateTypes[] = $template->id;
         }
         $field->templateTypes = $templateTypes;

         if($field->save()){
            $this->message('Created system field: ' . $field->name);
         } else {
            $this->error('Problem creating system field: ' . $field->name);
         }

      }

      //create 'cf_status' field
      if(!$this->fields->get('cf_status')){
         $field = new Field();
         $field->name = 'cf_status';
         $field->label = 'Publishing Status';
         $field->description = '';
         $field->labelFieldName = 'title';
         $field->type = wire('modules')->get('FieldtypePage');
         $field->inputfield = 'InputfieldSelect';
         $field->derefAsPage = FieldtypePage::derefAsPageOrFalse;
         $field->parent_id = $this->status_root_page_id;
         $field->flags = $this->field->flags | Field::flagSystem;
         if($field->save()){
            $this->message('Created system field: ' . $field->name);
         } else {
            $this->error('Problem creating system field: ' . $field->name);
         }
      }

   }

   protected function deleteFields(){
      /** Assume that the templates the following fields are tied to are already deleted **/
      $fields = array('templates_with_workflow', 'cf_status');

      foreach($fields as $fname){
         $field = null;
         $field = $this->fields->get($fname);
         if($field){
            $field->flags = Field::flagSystemOverride;
            $field->flags = 0;
            if($this->fields->delete($field)){
               $this->message('Removed field: ' . $fname);
            } else {
               $this->error('Problem removing field: ' . $fname);
            }
         }
      }

   }

   protected function createCustomPages(){
      
      $templates = $this->templates;
      $pages = $this->pages;
      $data = array();

      $holderTemplate = $templates->get(self::HOLDER_TEMPLATE_NAME);

      //see if we still need to create our page
      $checkPage = $this->pages->get('template=' . self::ROOT_TEMPLATE_NAME . ',name=' . self::ROOT_PAGE_NAME);
      if(!$checkPage->id){
         //create our base settings page under "admin"
         $cfPage = new Page();
         $cfPage->template = $templates->get(self::ROOT_TEMPLATE_NAME);
         $cfPage->parent = $pages->get($this->config->adminRootPageID);
         $cfPage->title = 'Content Flow';
         $cfPage->name = self::ROOT_PAGE_NAME;
         $cfPage->save();

         $cfRootPage = $cfPage;
      } else {
         $cfRootPage = $checkPage;
      }

      //save our cf root page id so we can reference this later.
      $this->setModuleData('root_page_id', $cfRootPage->id);


      //see if we still need to create our permissions
      $checkPermission = $this->permissions->get(self::PERMISSION_NAME);
      if(!$checkPermission->id){
         $perm = new Permission();
         $perm->name = self::PERMISSION_NAME;
         $perm->title = $this->_('Access Content Flow pages');
         $perm->save();
      }

      //create status pages
      $checkStatusRoot = $pages->get("parent=$cfRootPage,name=contentflow-statuses");
      if(!$checkStatuses->id){
         $pStatuses = new Page();
         $pStatuses->template = $holderTemplate;
         $pStatuses->parent = $cfRootPage;
         $pStatuses->name = 'status';
         $pStatuses->title = $this->_('Status');
         $pStatuses->save();

         $statusRoot = $pStatuses;
      } else {
         $statusRoot = $checkStatusRoot;
      }
      $this->setModuleData('status_root_page_id', $statusRoot->id);

      //create our default statuses
      if(!$statusRoot->numChildren){
         $defaultStatuses = $this->getStuff('status');
         foreach($defaultStatuses as $name => $title){
            $p = new Page();
            $p->parent = $statusRoot;
            $p->template = $holderTemplate;
            $p->name = $name;
            $p->title = $title;
            $p->save();
         }
      }

      //save module data
      $this->saveModuleData();
   }
}