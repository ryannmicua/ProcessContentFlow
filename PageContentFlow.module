<?php

/**
 * Adds method hook to Page objects for doing stuff when cfStatus changes
 * Page::cfChangedStatus($oldStatus, $newStatus) see bottom of this file to see description
 * about parameters
 */

class PageContentFlow extends WireData implements Module{

   protected $id;
   protected $page;
   protected $user;
   protected $isPost = false;
   protected $cfRootPage;
   protected $cfMainModule;
   protected $stop = false;
   protected $statusBeforeSave;

   public static function getModuleInfo() {
      return array(
         'title' => 'Content Flow Tab', 
         'version' => 1, 
         'summary' => 'Adds a Publish Workflow Tab on pages.',
         'singular' => true, 
         'autoload' => true,
         'requires' => array('ProcessContentFlow')
      );
   }


   public function init(){
      if(isset($_POST['id'])) $this->id = (int) $_POST['id']; 
         else if(isset($_GET['id'])) $this->id = (int) $_GET['id']; 

      if(!$this->id){
         $this->stop = true;
         return;
      }

      $this->user = $this->user;
      $this->page = $this->pages->get($this->id);
      if($this->page instanceof NullPage){ $this->stop = true; return; }

      // determine if we're going to be dealing with a save/post request
      $this->isPost = ($this->input->post->id > 0 && (((int) $this->input->post->id) === $this->page->id)) || $this->config->ajax && (count($_POST) || isset($_SERVER['HTTP_X_FIELDNAME'])); 

      /** Add our hooks **/
      $this->addHook('Page::cfChangedStatus', $this, 'hookCFChangedStatus');

      wire()->pages->addHookAfter('saveReady', $this, 'hookGetCFStatusBeforeSave');
      $this->addHookAfter('Fieldtype::savePageField', $this, 'hookCheckChangeStatus');

   }

   public function ready(){

      if($this->stop) return;

      $this->cfMainModule = $this->modules->get('ProcessContentFlow');

      $this->cfRootPage = $this->pages->get($this->cfMainModule->root_page_id);

      if($this->cfRootPage instanceOf NullPage){
         $this->error('Could not load Content Flow base page.');
         $this->stop = true;
         return;
      }

      //don't run code below if we have a post request
      if($this->isPost) return;

      //check if this page should have a workflow tab 
      $templatesWithWorkflow = $this->cfMainModule->getTemplatesWithWorkflow();
      if(count($templatesWithWorkflow)){
         foreach($templatesWithWorkflow as $temp){
            if($temp->id == $this->page->template->id){
               $this->addHookAfter('ProcessPageEdit::buildForm', $this, 'hookRemoveCFFieldsFromEditPage');
               $this->addHookAfter('ProcessPageEdit::buildForm', $this, 'hookPageBuildForm');
               
               break;
            }
         }
      }
      
   }

   protected function ___buildFormWorkFlowTab(){
      $modules = $this->modules;
      $page = $this->page;

      $wrapper = new InputfieldWrapper();
      $wrapper->attr('id', __CLASS__ . 'WorkFlow');
      $wrapper->attr('title', $this->_('Publishing Workflow'));

      //add cf_status field
      $field = $page->template->fields->getField('cf_status');
      $inputfield = $field->getInputfield($page);
      if(!$inputfield){
         $this->error('Could not display Workflow Status field');
      } else {
         
         $inputfield->value = $page->get($field->name);
         $wrapper->append($inputfield);
      }

      return $wrapper;
   }


   /**
    * ======================================
    * HOOKS GO BELOW
    * ======================================
    */

   /**
    * @Hooks to ProcessPageEdit::buildForm
    */
   public function hookPageBuildForm(HookEvent $event){
      $form = $event->return;

      //get the 'Content' tab input field wrapper so we can append our tab after this
      $contentTab = $form->children('id=ProcessPageEditContent')->first();

      if($contentTab->id){
         $event->return = $form->insertAfter($this->buildFormWorkFlowTab(), $contentTab);
      } else {
         $event->return = $form->append($this->buildFormWorkFlowTab());
      }

      $field = $this->modules->get('InputfieldSubmit');
      $field->attr('id+name', 'preview'); 
      $field->attr('class', $field->class); 
      $field->attr('value', 'Previewer'); 

      //$event->return = $form->append($field); 

   }


   /**
    * Removes workflow fields from being returned when a page calls getInputfields() as in 
    * ProcessPageEdit::buildForm() because we don't want workflow fields to show up the normal
    * place. We want to show workflow fields under the 'Workflow' tab
    *
    * NOTE: If this hook is being run then it means that the current page has workflow enabled
    *
    * @Hooks to ProcessPageEdit::buildForm
    * @param  HookEvent $event
    */
   public function hookRemoveCFFieldsFromEditPage(HookEvent $event){
      $form = $event->return;

      $workflowFieldNames = $this->cfMainModule->getWorkflowFields();

      $fieldsToFilter = $form->find('name='.implode('|',$workflowFieldNames));

      if(!count($fieldsToFilter)) return;

      foreach($fieldsToFilter as $f){
         $f->parent->remove($f);
      }

      $event->return = $form;

   }


   /**
    * Get status before page is saved
    */
   public function hookGetCFStatusBeforeSave(HookEvent $event){
      $page = $event->arguments('page');
      $statusFieldName = 'cf_status';

      if(!$page->fields->hasField($statusFieldName)) return;

      //we'll need the clone later
      $clone = clone $page;

      // get the old value of the field
      //$page->uncache();
      $clone->uncache();
      $this->pageStatusBeforeSave = $clone->$statusFieldName;   
      
   }


   /**
    * check if status has changed and trigger Page::cfChangedStatus hook
    *
    * hooks into Fieldtype::savePageField
    */
   protected function hookCheckChangeStatus(HookEvent $event){
      $page = $event->arguments('page');
      $field = $event->arguments('field');
      $statusFieldName = 'cf_status';

      //page field did not save to database
      if(!$event->return) return;
      
      //field is cf_status field
      if($field->name != $statusFieldName) return;
      
      $new = $page->get($statusFieldName);

      //don't do anything if cf_status hasn't changed
      if($this->pageStatusBeforeSave->id == $new->id) return;

      //trigger status change
      $page->cfChangedStatus($this->pageStatusBeforeSave, $new);
   }


   /**
    * hook Page::cfChangeStatus
    */
   protected function hookCFChangedStatus(HookEvent $event){
      $old = $event->arguments(0);
      $new = $event->arguments(1);

      //$this->message('Publishing status has changed from ' . $old->title . ' to ' . $new->title);

      $notice = new NoticeMessage('Publishing status has changed from ' . $old->title . ' to ' . $new->title);
      $notice->class = $this->className();
      wire('notices')->prepend($notice);

      $event->return = true;
   }

}


/**
 * Description of Page::cfChangedStatus()
 *
 * both $oldStatus and $newStatus are just Page objects under /admin/Content Flow/Status
Page::cfChangedStatus($oldStatus, $newStatus)
 */